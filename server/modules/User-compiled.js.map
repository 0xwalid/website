{"version":3,"sources":["User.js"],"names":[],"mappings":"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","file":"User-compiled.js","sourcesContent":["const express = require('express');\r\nvar crypto = require('crypto');\r\nvar DataTypes = require(\"sequelize\");\r\n\r\nvar sequelize = require('../mysql/sequelize');\r\n\r\n\r\nvar User = sequelize.define('users', {\r\n    username: DataTypes.STRING,\r\n    password: DataTypes.STRING\r\n}, {\r\n    instanceMethods: {\r\n        retrieveAll: function(onSuccess, onError) {\r\n            User.findAll({}, {raw: true}).success(onSuccess).error(onError);\r\n        },\r\n        retrieveById: function(user_id, onSuccess, onError) {\r\n            User.find({where: {id: user_id}}, {raw: true}).success(onSuccess).error(onError);\r\n        },\r\n        add: function(onSuccess, onError) {\r\n            var username = this.username;\r\n            var password = this.password;\r\n\r\n            var shasum = crypto.createHash('sha1');\r\n            shasum.update(password);\r\n            password = shasum.digest('hex');\r\n\r\n            User.build({ username: username, password: password })\r\n                .save().success(onSuccess).error(onError);\r\n        },\r\n        updateById: function(user_id, onSuccess, onError) {\r\n            var id = user_id;\r\n            var username = this.username;\r\n            var password = this.password;\r\n\r\n            var shasum = crypto.createHash('sha1');\r\n            shasum.update(password);\r\n            password = shasum.digest('hex');\r\n\r\n            User.update({ username: username,password: password},{where: {id: id} }).success(onSuccess).error(onError);\r\n        },\r\n        removeById: function(user_id, onSuccess, onError) {\r\n            User.destroy({where: {id: user_id}}).success(onSuccess).error(onError);\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// IMPORT ROUTES\r\n// =============================================================================\r\nvar UserRouter = express.Router();\r\n\r\n// on routes that end in /users\r\n// ----------------------------------------------------\r\nUserRouter.route('/users')\r\n\r\n// create a user (accessed at POST http://localhost:8080/api/users)\r\n    .post(function(req, res) {\r\n\r\n        var username = req.body.username; //bodyParser does the magic\r\n        var password = req.body.password;\r\n\r\n        var user = User.build({ username: username, password: password });\r\n\r\n        user.add(function(success){\r\n                res.json({ message: 'User created!' });\r\n            },\r\n            function(err) {\r\n                res.send(err);\r\n            });\r\n    })\r\n\r\n    // get all the users (accessed at GET http://localhost:3001/api/users)\r\n    .get(function(req, res) {\r\n        var user = User.build();\r\n\r\n        user.retrieveAll(function(users) {\r\n            if (users) {\r\n                res.json(users);\r\n            } else {\r\n                res.send(401, \"User not found\");\r\n            }\r\n        }, function(error) {\r\n            res.send(\"User not found\");\r\n        });\r\n    });\r\n\r\n\r\n// on routes that end in /users/:user_id\r\n// ----------------------------------------------------\r\nUserRouter.route('/users/:user_id')\r\n\r\n// update a user (accessed at PUT http://localhost:8080/api/users/:user_id)\r\n    .put(function(req, res) {\r\n        var user = User.build();\r\n\r\n        user.username = req.body.username;\r\n        user.password = req.body.password;\r\n\r\n        user.updateById(req.params.user_id, function(success) {\r\n            console.log(success);\r\n            if (success) {\r\n                res.json({ message: 'User updated!' });\r\n            } else {\r\n                res.send(401, \"User not found\");\r\n            }\r\n        }, function(error) {\r\n            res.send(\"User not found\");\r\n        });\r\n    })\r\n\r\n    // get a user by id(accessed at GET http://localhost:8080/api/users/:user_id)\r\n    .get(function(req, res) {\r\n        var user = User.build();\r\n\r\n        user.retrieveById(req.params.user_id, function(users) {\r\n            if (users) {\r\n                res.json(users);\r\n            } else {\r\n                res.send(401, \"User not found\");\r\n            }\r\n        }, function(error) {\r\n            res.send(\"User not found\");\r\n        });\r\n    })\r\n\r\n    // delete a user by id (accessed at DELETE http://localhost:8080/api/users/:user_id)\r\n    .delete(function(req, res) {\r\n        var user = User.build();\r\n\r\n        user.removeById(req.params.user_id, function(users) {\r\n            if (users) {\r\n                res.json({ message: 'User removed!' });\r\n            } else {\r\n                res.send(401, \"User not found\");\r\n            }\r\n        }, function(error) {\r\n            res.send(\"User not found\");\r\n        });\r\n    });\r\n\r\n\r\n\r\nmodule.exports = UserRouter;"]}