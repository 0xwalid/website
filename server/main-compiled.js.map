{"version":3,"sources":["main.js"],"names":[],"mappings":";;AAAA,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,SAAS,QAAQ,qBAAR,CAAf;AACA,IAAM,gBAAgB,QAAQ,yBAAR,CAAtB;AACA,IAAM,UAAU,QAAQ,mBAAR,CAAhB;AACA,IAAM,WAAW,QAAQ,aAAR,CAAjB;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;;AAEA,IAAM,SAAU,4BAAhB;AACA,IAAM,YAAa,mCAAnB;AACA,IAAM,MAAO,kCAAb;;AAEA,IAAM,MAAM,SAAZ;AACA,IAAI,GAAJ,CAAQ,UAAR;;AAEA;AACA;AACA;AACA,IAAI,QAAQ,GAAR,KAAgB,aAApB,EAAmC;AACjC,MAAM,WAAW,QAAQ,aAAR,CAAjB;;AAEA,SAAO,IAAP,CAAY,iDAAZ;AACA,MAAI,GAAJ,CAAQ,QAAQ,wBAAR,EAAkC,QAAlC,EAA4C;AAClD,gBAAc,cAAc,MAAd,CAAqB,UADe;AAElD,iBAAc,KAAK,OAAL,CAAa,QAAQ,QAArB,EAA+B,QAAQ,MAAvC,CAFoC;AAGlD,SAAc,IAHoC;AAIlD,WAAc,KAJoC;AAKlD,YAAc,KALoC;AAMlD,UAAc,KANoC;AAOlD,WAAc;AAPoC,GAA5C,CAAR;AASA,MAAI,GAAJ,CAAQ,QAAQ,wBAAR,EAAkC,QAAlC,EAA4C;AAClD,UAAM;AAD4C,GAA5C,CAAR;;AAIA;AACA;AACA;AACA;AACA,MAAI,GAAJ,CAAQ,QAAQ,MAAR,CAAe,KAAK,OAAL,CAAa,QAAQ,QAArB,EAA+B,QAA/B,CAAf,CAAR;;AAEA;AACA;AACA;AACA,MAAI,GAAJ,CAAQ,GAAR,EAAa,UAAU,GAAV,EAAe,GAAf,EAAoB,IAApB,EAA0B;AACrC,QAAM,WAAW,KAAK,IAAL,CAAU,SAAS,UAAnB,EAA+B,YAA/B,CAAjB;AACA,aAAS,gBAAT,CAA0B,QAA1B,CAAmC,QAAnC,EAA6C,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC5D,UAAI,GAAJ,EAAS;AACP,eAAO,KAAK,GAAL,CAAP;AACD;AACD,UAAI,GAAJ,CAAQ,cAAR,EAAwB,WAAxB;AACA,UAAI,IAAJ,CAAS,MAAT;AACA,UAAI,GAAJ;AACD,KAPD;AAQD,GAVD;AAWD,CArCD,MAqCO;AACL,SAAO,IAAP,CACE,2EACA,sEADA,GAEA,uEAFA,GAGA,wEAHA,GAIA,sEALF;;AAQA;AACA;AACA;AACA,MAAI,GAAJ,CAAQ,QAAQ,MAAR,CAAe,KAAK,OAAL,CAAa,QAAQ,QAArB,EAA+B,QAAQ,MAAvC,CAAf,CAAR;AACD;;AAGD,OAAO,OAAP,GAAiB,MAAM,YAAN,CAAmB;AAClC,OAAK,GAAG,YAAH,CAAgB,MAAhB,CAD6B;AAElC,eAAa,GAAG,YAAH,CAAgB,SAAhB,CAFqB;AAGlC,MAAI,CAAC,GAAG,YAAH,CAAgB,GAAhB,CAAD;AAH8B,CAAnB,EAId,GAJc,CAAjB","file":"main-compiled.js","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst webpack = require('webpack');\r\nconst logger = require('../build/lib/logger');\r\nconst webpackConfig = require('../build/webpack.config');\r\nconst project = require('../project.config');\r\nconst compress = require('compression');\r\nvar https = require('https');\r\nvar fs = require('fs');\r\n\r\nconst mysite = ('./build/cert/ddlphtcsr.pem');\r\nconst mysiteCrt = ('./build/cert/7ce659ffec8df530.crt');\r\nconst gd1 = ('./build/cert/gd_bundle-g2-g1.crt');\r\n\r\nconst app = express();\r\napp.use(compress());\r\n\r\n// ------------------------------------\r\n// Apply Webpack HMR Middleware\r\n// ------------------------------------\r\nif (project.env === 'development') {\r\n  const compiler = webpack(webpackConfig);\r\n\r\n  logger.info('Enabling webpack development and HMR middleware');\r\n  app.use(require('webpack-dev-middleware')(compiler, {\r\n    publicPath  : webpackConfig.output.publicPath,\r\n    contentBase : path.resolve(project.basePath, project.srcDir),\r\n    hot         : true,\r\n    quiet       : false,\r\n    noInfo      : false,\r\n    lazy        : false,\r\n    stats       : 'normal',\r\n  }));\r\n  app.use(require('webpack-hot-middleware')(compiler, {\r\n    path: '/__webpack_hmr'\r\n  }));\r\n\r\n  // Serve static assets from ~/public since Webpack is unaware of\r\n  // these files. This middleware doesn't need to be enabled outside\r\n  // of development since this directory will be copied into ~/dist\r\n  // when the application is compiled.\r\n  app.use(express.static(path.resolve(project.basePath, 'public')));\r\n\r\n  // This rewrites all routes requests to the root /index.html file\r\n  // (ignoring file requests). If you want to implement universal\r\n  // rendering, you'll want to remove this middleware.\r\n  app.use('*', function (req, res, next) {\r\n    const filename = path.join(compiler.outputPath, 'index.html');\r\n    compiler.outputFileSystem.readFile(filename, (err, result) => {\r\n      if (err) {\r\n        return next(err)\r\n      }\r\n      res.set('content-type', 'text/html');\r\n      res.send(result);\r\n      res.end()\r\n    })\r\n  })\r\n} else {\r\n  logger.warn(\r\n    'Server is being run outside of live development mode, meaning it will ' +\r\n    'only serve the compiled application bundle in ~/dist. Generally you ' +\r\n    'do not need an application server for this and can instead use a web ' +\r\n    'server such as nginx to serve your static files. See the \"deployment\" ' +\r\n    'section in the README for more information on deployment strategies.'\r\n  );\r\n\r\n  // Serving ~/dist by default. Ideally these files should be served by\r\n  // the web server and not the app server, but this helps to demo the\r\n  // server in production.\r\n  app.use(express.static(path.resolve(project.basePath, project.outDir)))\r\n}\r\n\r\n\r\nmodule.exports = https.createServer({\r\n  key: fs.readFileSync(mysite),\r\n  certificate: fs.readFileSync(mysiteCrt),\r\n  ca: [fs.readFileSync(gd1)]\r\n}, app);\r\n"]}