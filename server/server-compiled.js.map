{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["// BASE SETUP\n// =============================================================================\nconst fs = require('fs');\nconst path = require('path');\nvar mime = require('mime');\n\nconst express = require('express'),\n\tbodyParser = require('body-parser');\n\nvar app = express();\napp.use(bodyParser());\n\napp.use(function(req, res, next) {\n\tres.header(\"Access-Control-Allow-Origin\", \"*\");\n\tres.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n\tnext();\n});\n\nvar env = app.get('env') == 'development' ? 'dev' : app.get('env');\nvar port = process.env.PORT || 3001;\n\n\n// IMPORT MODELS\n// =============================================================================\nvar Sequelize = require('sequelize');\n\n// db config\nvar env = \"dev\";\nvar config = require('./mysql/database.json')[env];\nvar password = config.password ? config.password : null;\n\n// initialize database connection\nvar sequelize = new Sequelize(\n\tconfig.database,\n\tconfig.user,\n\tconfig.password,\n\t{\n    dialect: config.driver,\n    logging: console.log,\n\t\tdefine: {\n\t\t\ttimestamps: false\n\t\t}\n\t}\n);\n\n// DOWNLOAD FILE\napp.get('/white_paper/:fileName', function(req, res, next){\n\n\t// var file = req.params.file\n\n\tvar fileName = req.params.fileName;\n\tvar filePath =\"./server/files/\" + fileName;\n\tvar stats = fs.statSync(filePath);\n\tif(stats.isFile()){\n\t\tres.set({\n\t\t\t'Content-Type': 'application/octet-stream',\n\t\t});\n\t\tfs.createReadStream(filePath).pipe(res);\n\t} else {\n\t\tres.end(404);\n\t}\n});\n\n\nvar crypto = require('crypto');\nvar DataTypes = require(\"sequelize\");\n\nvar User = sequelize.define('users', {\n    username: DataTypes.STRING,\n    password: DataTypes.STRING\n  }, {\n    instanceMethods: {\n      retrieveAll: function(onSuccess, onError) {\n\t\t\tUser.findAll({}, {raw: true}).success(onSuccess).error(onError);\n\t  },\n      retrieveById: function(user_id, onSuccess, onError) {\n\t\t\tUser.find({where: {id: user_id}}, {raw: true}).success(onSuccess).error(onError);\n\t  },\n      add: function(onSuccess, onError) {\n\t\t\tvar username = this.username;\n\t\t\tvar password = this.password;\n\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tshasum.update(password);\n\t\t\tpassword = shasum.digest('hex');\n\n\t\t\tUser.build({ username: username, password: password })\n\t\t\t    .save().success(onSuccess).error(onError);\n\t   },\n\t  updateById: function(user_id, onSuccess, onError) {\n\t\t\tvar id = user_id;\n\t\t\tvar username = this.username;\n\t\t\tvar password = this.password;\n\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tshasum.update(password);\n\t\t\tpassword = shasum.digest('hex');\n\n\t\t\tUser.update({ username: username,password: password},{where: {id: id} }).success(onSuccess).error(onError);\n\t   },\n      removeById: function(user_id, onSuccess, onError) {\n\t\t\tUser.destroy({where: {id: user_id}}).success(onSuccess).error(onError);\n\t  }\n    }\n  });\n\n\n// IMPORT ROUTES\n// =============================================================================\nvar router = express.Router();\n\n// on routes that end in /users\n// ----------------------------------------------------\nrouter.route('/users')\n\n// create a user (accessed at POST http://localhost:8080/api/users)\n.post(function(req, res) {\n\n\tvar username = req.body.username; //bodyParser does the magic\n\tvar password = req.body.password;\n\n\tvar user = User.build({ username: username, password: password });\n\n\tuser.add(function(success){\n\t\tres.json({ message: 'User created!' });\n\t},\n\tfunction(err) {\n\t\tres.send(err);\n\t});\n})\n\n// get all the users (accessed at GET http://localhost:3001/api/users)\n.get(function(req, res) {\n\tvar user = User.build();\n\n\tuser.retrieveAll(function(users) {\n\t\tif (users) {\n\t\t  res.json(users);\n\t\t} else {\n\t\t  res.send(401, \"User not found\");\n\t\t}\n\t  }, function(error) {\n\t\tres.send(\"User not found\");\n\t  });\n});\n\n\n// on routes that end in /users/:user_id\n// ----------------------------------------------------\nrouter.route('/users/:user_id')\n\n// update a user (accessed at PUT http://localhost:8080/api/users/:user_id)\n.put(function(req, res) {\n\tvar user = User.build();\n\n\tuser.username = req.body.username;\n\tuser.password = req.body.password;\n\n\tuser.updateById(req.params.user_id, function(success) {\n\t\tconsole.log(success);\n\t\tif (success) {\n\t\t\tres.json({ message: 'User updated!' });\n\t\t} else {\n\t\t  res.send(401, \"User not found\");\n\t\t}\n\t  }, function(error) {\n\t\tres.send(\"User not found\");\n\t  });\n})\n\n// get a user by id(accessed at GET http://localhost:8080/api/users/:user_id)\n.get(function(req, res) {\n\tvar user = User.build();\n\n\tuser.retrieveById(req.params.user_id, function(users) {\n\t\tif (users) {\n\t\t  res.json(users);\n\t\t} else {\n\t\t  res.send(401, \"User not found\");\n\t\t}\n\t  }, function(error) {\n\t\tres.send(\"User not found\");\n\t  });\n})\n\n// delete a user by id (accessed at DELETE http://localhost:8080/api/users/:user_id)\n.delete(function(req, res) {\n\tvar user = User.build();\n\n\tuser.removeById(req.params.user_id, function(users) {\n\t\tif (users) {\n\t\t  res.json({ message: 'User removed!' });\n\t\t} else {\n\t\t  res.send(401, \"User not found\");\n\t\t}\n\t  }, function(error) {\n\t\tres.send(\"User not found\");\n\t  });\n});\n\n// Middleware to use for all requests\nrouter.use(function(req, res, next) {\n\t// do logging\n\tconsole.log('Something is happening.');\n\tnext();\n});\n\n// REGISTER OUR ROUTES\n// =============================================================================\napp.use('/api', router);\n\n// START THE SERVER\n// =============================================================================\napp.listen(port);\nconsole.log('Magic happens on port ' + port);\n"]}