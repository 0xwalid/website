{"version":3,"sources":["compile.js"],"names":[],"mappings":";;AAAA,IAAM,KAAK,QAAQ,UAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,QAAQ,QAAQ,OAAR,CAAd;AACA,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,SAAS,QAAQ,eAAR,CAAf;AACA,IAAM,gBAAgB,QAAQ,mBAAR,CAAtB;AACA,IAAM,UAAU,QAAQ,sBAAR,CAAhB;;AAEA,IAAM,qBAAqB,SAArB,kBAAqB,CAAC,aAAD;AAAA,SACzB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/B,YAAQ,aAAR,EAAuB,GAAvB,CAA2B,UAAC,GAAD,EAAM,KAAN,EAAgB;AACzC,UAAI,GAAJ,EAAS;AACP,eAAO,KAAP,CAAa,6CAAb,EAA4D,GAA5D;AACA,eAAO,OAAO,GAAP,CAAP;AACD;;AAED,UAAM,YAAY,MAAM,MAAN,EAAlB;AACA,UAAI,UAAU,MAAV,CAAiB,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,eAAO,KAAP,CAAa,sCAAb;AACA,eAAO,GAAP,CAAW,UAAU,MAAV,CAAiB,IAAjB,CAAsB,IAAtB,CAAX;AACA,eAAO,OAAO,IAAI,KAAJ,CAAU,qCAAV,CAAP,CAAP;AACD,OAJD,MAIO,IAAI,UAAU,QAAV,CAAmB,MAAnB,GAA4B,CAAhC,EAAmC;AACxC,eAAO,IAAP,CAAY,wCAAZ;AACA,eAAO,GAAP,CAAW,UAAU,QAAV,CAAmB,IAAnB,CAAwB,IAAxB,CAAX;AACD;AACD,cAAQ,KAAR;AACD,KAhBD;AAiBD,GAlBD,CADyB;AAAA,CAA3B;;AAqBA,IAAM,UAAU,SAAV,OAAU;AAAA,SAAM,QAAQ,OAAR,GACnB,IADmB,CACd;AAAA,WAAM,OAAO,IAAP,CAAY,sBAAZ,CAAN;AAAA,GADc,EAEnB,IAFmB,CAEd;AAAA,WAAM,OAAO,IAAP,CAAY,qCAAqC,MAAM,IAAN,CAAW,QAAQ,GAAnB,CAAjD,CAAN;AAAA,GAFc,EAGnB,IAHmB,CAGd;AAAA,WAAM,mBAAmB,aAAnB,CAAN;AAAA,GAHc,EAInB,IAJmB,CAId,UAAC,KAAD,EAAW;AACf,WAAO,IAAP,+CAAwD,QAAQ,MAAhE;AACA,OAAG,QAAH,CACE,KAAK,OAAL,CAAa,QAAQ,QAArB,EAA+B,QAA/B,CADF,EAEE,KAAK,OAAL,CAAa,QAAQ,QAArB,EAA+B,QAAQ,MAAvC,CAFF;AAIA,WAAO,KAAP;AACD,GAXmB,EAYnB,IAZmB,CAYd,UAAC,KAAD,EAAW;AACf,QAAI,QAAQ,OAAZ,EAAqB;AACnB,aAAO,GAAP,CAAW,MAAM,QAAN,CAAe;AACxB,gBAAQ,IADgB;AAExB,gBAAQ;AAFgB,OAAf,CAAX;AAID;AACD,WAAO,OAAP,4CAAwD,QAAQ,MAAhE;AACD,GApBmB,EAqBnB,KArBmB,CAqBb,UAAC,GAAD;AAAA,WAAS,OAAO,KAAP,CAAa,8BAAb,EAA6C,GAA7C,CAAT;AAAA,GArBa,CAAN;AAAA,CAAhB;;AAuBA","file":"compile-compiled.js","sourcesContent":["const fs = require('fs-extra');\r\nconst path = require('path');\r\nconst chalk = require('chalk');\r\nconst webpack = require('webpack');\r\nconst logger = require('../lib/logger');\r\nconst webpackConfig = require('../webpack.config');\r\nconst project = require('../../project.config');\r\n\r\nconst runWebpackCompiler = (webpackConfig) =>\r\n  new Promise((resolve, reject) => {\r\n    webpack(webpackConfig).run((err, stats) => {\r\n      if (err) {\r\n        logger.error('Webpack compiler encountered a fatal error.', err);\r\n        return reject(err)\r\n      }\r\n\r\n      const jsonStats = stats.toJson();\r\n      if (jsonStats.errors.length > 0) {\r\n        logger.error('Webpack compiler encountered errors.');\r\n        logger.log(jsonStats.errors.join('\\n'));\r\n        return reject(new Error('Webpack compiler encountered errors'))\r\n      } else if (jsonStats.warnings.length > 0) {\r\n        logger.warn('Webpack compiler encountered warnings.');\r\n        logger.log(jsonStats.warnings.join('\\n'))\r\n      }\r\n      resolve(stats)\r\n    })\r\n  });\r\n\r\nconst compile = () => Promise.resolve()\r\n  .then(() => logger.info('Starting compiler...'))\r\n  .then(() => logger.info('Target application environment: ' + chalk.bold(project.env)))\r\n  .then(() => runWebpackCompiler(webpackConfig))\r\n  .then((stats) => {\r\n    logger.info(`Copying static assets from ./public to ./${project.outDir}.`);\r\n    fs.copySync(\r\n      path.resolve(project.basePath, 'public'),\r\n      path.resolve(project.basePath, project.outDir)\r\n    );\r\n    return stats\r\n  })\r\n  .then((stats) => {\r\n    if (project.verbose) {\r\n      logger.log(stats.toString({\r\n        colors: true,\r\n        chunks: false,\r\n      }))\r\n    }\r\n    logger.success(`Compiler finished successfully! See ./${project.outDir}.`)\r\n  })\r\n  .catch((err) => logger.error('Compiler encountered errors.', err));\r\n\r\ncompile();\r\n"]}